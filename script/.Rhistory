#Barre de sélection
inputPanel(selectInput("reg",
"R\u00e9gions",
choices = unique(ville$LIBREG),
selected = "Auvergne-Rh"
)
)
#Graph Nb logement / département
renderPlotly({
regSelect=ville[LIBREG %in% input$reg,]
resumeRegion=regSelect[,sum(N),by=LIBDEP]
plot_ly(x=resumeRegion$LIBDEP,
y=resumeRegion$V1,
type="bar",
name="logements sociaux",
marker = list(color = 'rgb(124, 180, 211)',
line = list(color = 'rgb(8,48,107)',
width = 3
)
),
) %>%
layout(yaxis=list(title="Nombre de logements sociaux")) %>%
add_trace(y=mean(resumeRegion$N),
mode="lines",
type="scatter",
name="moyenne r\u00e9gionale"
)
})
#Graph Top 10 ville
renderPlotly({
regSelect=ville[LIBREG %in% input$reg,]
logville=regSelect[,sum(N),by=LIBCOM]
logville=logville[order(V1,decreasing = FALSE),]
logville=tail(logville,10)
yform = list(categoryorder = "array",
categoryarray = logville$LIBCOM
)
plot_ly(x=logville$V1,
y=logville$LIBCOM,
type="bar",
orientation="h",
name="logements sociaux",
marker = list(color = 'rgb(128, 170, 174 )',
line = list(color = 'rgb(8,48,107)',
width = 3
)
)
) %>%
layout(yaxis=yform)
})
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
# package pour la fonction arrange
#install.packages("dplyr")
#library(dplyr)
# package pour la fonction geom_label_repel
#install.packages("ggrepel")
#library(ggrepel)
#install.packages("scales")
library(scales)
#dataframe de la freq des types de construction -->
df_typeCons <- as.data.frame(table(dataPDLL2016$TYPECONST_red))
# Renommage colonne
colnames(df_typeCons) <- c("Type_Construction", "freq")
#Modification des valeurs Type_Construction pour une meilleure compréhension
df_typeCons$Type_Construction <- as.character(df_typeCons$Type_Construction)
df_typeCons$Type_Construction[df_typeCons$Type_Construction == "C"] <- "Collectif"
df_typeCons$Type_Construction[df_typeCons$Type_Construction == "I"] <- "Individuel"
df_typeCons$Type_Construction[df_typeCons$Type_Construction == "E"] <- "Etudiant"
#trier le dataframe dans l'ordre croissant
SQL_OrderBy <- "SELECT * FROM df_typeCons ORDER BY freq"
df_typeCons <- sqldf(SQL_OrderBy)
#mutate permet d'ajouter une colonne
df_typeCons <- mutate(df_typeCons, Pourcentage=percent(`freq`/sum(`freq`)))
# Création du Donut
Donut_Char <- df_typeCons %>%
plot_ly(labels = ~Type_Construction, values = ~freq) %>%
add_pie(hole = 0.6) %>%
layout(title = "Répartition des types de constructions des logements sociaux\ndans les Pays de la Loire en 2016",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
Donut_Char
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
table_NbPiece <- table(dataPDLL2016$NBPIECE_red)
table_NbPiece <- as.data.frame(table_NbPiece)
# Renommage colonne
colnames(table_NbPiece) <- c("NbPiece", "freq")
#Ajout de la colonne Pourcentage
table_NbPiece <- mutate(table_NbPiece, Pourcentage=percent(`freq`/sum(`freq`)))
#Calcul pour connaitre le nombre moyen de pièce dans le logement sociaux
Values_NbPiece <- as.numeric(as.character(table_NbPiece$NbPiece))
Values_NbPiece <- as.data.frame(Values_NbPiece)
#Fusion 2 Dataframe
table_NbPiece <- cbind(table_NbPiece,Values_NbPiece)
table_NbPiece <- mutate(table_NbPiece, Quoeficient=`freq`*`Values_NbPiece`)
moy_NbPiece <- sum(table_NbPiece$Quoeficient)/sum(table_NbPiece$freq)
#Création du diagramme
plot_ly(x=table_NbPiece$NbPiece,y=table_NbPiece$freq,type="bar",name="logements sociaux", marker = list(color = 'rgb(147, 192, 148)',
line = list(color = 'rgb(8,48,107)',
width = 3))) %>%
layout(title = "Diagramme à barres représentant le nombre de\nlogements sociaux en fonction du nombre de pièce",
yaxis=list(title="Nombre de logements sociaux"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
table_NbPiece2017 <- table(dataPDLL2017$nbpiece_red)
table_NbPiece2017 <- as.data.frame(table_NbPiece2017)
# Renommage colonne
colnames(table_NbPiece2017) <- c("NbPiece", "freq")
#Ajout de la colonne Pourcentage
table_NbPiece2017 <- mutate(table_NbPiece2017, Pourcentage=percent(`freq`/sum(`freq`)))
#Calcul pour connaitre le nombre moyen de pièce dans le logement sociaux
Values_NbPiece2017 <- as.numeric(as.character(table_NbPiece2017$NbPiece))
Values_NbPiece2017 <- as.data.frame(Values_NbPiece2017)
#Fusion 2 Dataframe
table_NbPiece2017 <- cbind(table_NbPiece2017,Values_NbPiece2017)
table_NbPiece2017 <- mutate(table_NbPiece2017, Quoeficient=`freq`*`Values_NbPiece2017`)
moy_NbPiece2017 <- sum(table_NbPiece2017$Quoeficient)/sum(table_NbPiece2017$freq)
moy_NbPiece2017
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
table_NbPiece2018 <- table(dataPDLL2018$NBPIECE)
table_NbPiece2018 <- as.data.frame(table_NbPiece2018)
# Renommage colonne
colnames(table_NbPiece2018) <- c("NbPiece", "freq")
#Ajout de la colonne Pourcentage
table_NbPiece2018 <- mutate(table_NbPiece2018, Pourcentage=percent(`freq`/sum(`freq`)))
#Calcul pour connaitre le nombre moyen de pièce dans le logement sociaux
Values_NbPiece2018 <- as.numeric(as.character(table_NbPiece2018$NbPiece))
Values_NbPiece2018 <- as.data.frame(Values_NbPiece2018)
#Fusion 2 Dataframe
table_NbPiece2018 <- cbind(table_NbPiece2018,Values_NbPiece2018)
table_NbPiece2018 <- mutate(table_NbPiece2018, Quoeficient=`freq`*`Values_NbPiece2018`)
moy_NbPiece2018 <- sum(table_NbPiece2018$Quoeficient)/sum(table_NbPiece2018$freq)
moy_NbPiece2018
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
# affichage carte
nantesLong <- -1.5533600
nantesLat <- 47.2172500
points2016 <- unique(data.frame(longitudes = dfNantes2016$longitude,
latitudes = dfNantes2016$latitude,
annee = '2016',
DPE = dfNantes2016$DPEENERGIE_red)
)
points2017 <- unique(data.frame(longitudes = dfNantes2017$longitude,
latitudes = dfNantes2017$latitude,
annee = '2017',
DPE = dfNantes2017$DPEENERGIE_red
)
)
points2018 <- unique(data.frame(longitudes = dfNantes2018$longitude,
latitudes = dfNantes2018$latitude,
annee = '2018',
DPE = dfNantes2018$DPEENERGIE
)
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
colors <- c('rgb(239, 150, 207)', 'rgb(150, 211, 239)','rgb(150, 181, 239)' )
#Annee 2016
points2016$DPE[points2016$DPE == ''] <- NA
points2016$DPEGrad[points2016$DPE %in% c('A','B')] <- 'Bien isolé'
points2016$DPEGrad[points2016$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2016$DPEGrad[points2016$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2016 <- table(points2016$DPEGrad)
points2017$DPE[points2017$DPE == ''] <- NA
points2017$DPEGrad[points2017$DPE %in% c('A','B')] <- 'Bien isolé'
points2017$DPEGrad[points2017$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2017$DPEGrad[points2017$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2017 <- table(points2017$DPEGrad)
points2018$DPE[points2018$DPE == ''] <- NA
points2018$DPEGrad[points2018$DPE %in% c('A','B')] <- 'Bien isolé'
points2018$DPEGrad[points2018$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2018$DPEGrad[points2018$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2018 <- table(points2018$DPEGrad)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
points <- rbind(points2016, points2017, points2018)
table_evo <- table(points$annee)
p <- plot_ly(y=table_evo,
x=names(table_evo),
type='bar',
marker = list(color = 'rgb(166, 182, 166)',                                                                   line = list(color = 'rgb(8,48,107)',                                                                        width = 3)))
p
evolution <- 100*(nrow(points2018)-nrow(points2016))/nrow(points2016)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
m <- leaflet(points2017) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 12)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
m
p <- plot_ly() %>%
add_pie(points2016, labels = names(table_ener2016), values = table_ener2016, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0, 0.3), y = c(0, 1))) %>%
add_pie(points2017, labels = names(table_ener2017), values = table_ener2017, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0.35, 0.65), y = c(0, 1))) %>%
add_pie(points2018, labels = names(table_ener2018), values = table_ener2018, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0.7, 1), y = c(0, 1)))%>%
layout(title = "Evolution de l'état du logement de 2016 à 2018", showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
m <- leaflet(hlmMalIso) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 14)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
m
save.image("~/Master MEDAS/Datavisualisation/Test_RMD/Test_rmd/data/AllData.RData")
knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages(suppressWarnings(library(data.table)))
suppressPackageStartupMessages(suppressWarnings(library(DT)))
suppressPackageStartupMessages(suppressWarnings(library(plotly)))
suppressPackageStartupMessages(suppressWarnings(library(leaflet)))
suppressPackageStartupMessages(suppressWarnings(library(raster)))
suppressPackageStartupMessages(suppressWarnings(library(shiny)))
suppressPackageStartupMessages(suppressWarnings(library(sqldf)))
suppressPackageStartupMessages(suppressWarnings(library(proto)))
suppressPackageStartupMessages(suppressWarnings(library(gsubfn)))
suppressPackageStartupMessages(suppressWarnings(library(RSQLite)))
suppressPackageStartupMessages(suppressWarnings(library(questionr)))
suppressPackageStartupMessages(suppressWarnings(library(ggplot2)))
suppressPackageStartupMessages(suppressWarnings(library(plyr)))
suppressPackageStartupMessages(suppressWarnings(library(dplyr)))
suppressPackageStartupMessages(suppressWarnings(library(ggrepel)))
suppressPackageStartupMessages(suppressWarnings(library(scales)))
## Chargement de la table de données clean
setwd("C:/Users/mchauveau/Documents/Master MEDAS/Datavisualisation/Test_RMD/Test_rmd")
load(file="./data/AllData.RData")
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
points <- rbind(points2016, points2017, points2018)
table_evo <- table(points$annee)
p <- plot_ly(y=table_evo,
x=names(table_evo),
type='bar',
marker = list(color = 'rgb(166, 182, 166)',                                                                   line = list(color = 'rgb(8,48,107)',                                                                        width = 3)) %>%
layout(title = "Diagramme à barres représentant le nombre de\nlogements sociaux à Nantes lors de ces 3 dernières années",
yaxis=list(title="Nombre de logements sociaux"),
xaxis=list(title="Année")))
p
evolution <- 100*(nrow(points2018)-nrow(points2016))/nrow(points2016)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='maximechauveau',
token='61CF5DDD74929CEB225624395D37AE81',
secret='01teev83fPSiHdY03icdJ7v9RIpqScYmQKEtW5Go')
install.packages("data.table")
knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages(suppressWarnings(library(data.table)))
suppressPackageStartupMessages(suppressWarnings(library(DT)))
suppressPackageStartupMessages(suppressWarnings(library(plotly)))
suppressPackageStartupMessages(suppressWarnings(library(leaflet)))
suppressPackageStartupMessages(suppressWarnings(library(raster)))
suppressPackageStartupMessages(suppressWarnings(library(shiny)))
suppressPackageStartupMessages(suppressWarnings(library(sqldf)))
suppressPackageStartupMessages(suppressWarnings(library(proto)))
suppressPackageStartupMessages(suppressWarnings(library(gsubfn)))
suppressPackageStartupMessages(suppressWarnings(library(RSQLite)))
suppressPackageStartupMessages(suppressWarnings(library(questionr)))
suppressPackageStartupMessages(suppressWarnings(library(ggplot2)))
suppressPackageStartupMessages(suppressWarnings(library(plyr)))
suppressPackageStartupMessages(suppressWarnings(library(dplyr)))
suppressPackageStartupMessages(suppressWarnings(library(ggrepel)))
suppressPackageStartupMessages(suppressWarnings(library(scales)))
## Chargement de la table de données clean
setwd("C:/Users/mchauveau/Documents/Master MEDAS/Datavisualisation/Test_RMD/Test_rmd")
load(file="./data/AllData.RData")
DT::renderDataTable(ville,
options = list(searching = TRUE, ordering = FALSE, paging= TRUE),
escape = FALSE,
rownames = FALSE,
colnames = c("Communes","D\u00e9partements","R\u00e9gions", "Nombre de logements sociaux"))
region=ville[,sum(N),by=LIBREG]
plot_ly(x=region$LIBREG,y=region$V1,type="bar",
name="logements sociaux") %>%
layout(yaxis=list(title="Nombre de logements sociaux"),
title="Diagramme à barres représentant les régions françaises\nen fonction du nombre de logements sociaux")  %>%
add_trace(y=mean(region$V1),mode="lines",type="scatter",name="moyenne nationale")
logville=ville[order(N,decreasing = FALSE),]
logville=tail(logville,10)
logville$LIBCOM[2]="le havre"
yform = list(categoryorder = "array",categoryarray = logville$LIBCOM)
p1=plot_ly(x=logville$N,y=logville$LIBCOM,type="bar", marker = list(color = 'rgb(198, 111, 167)',
line = list(color = 'rgb(8,48,107)',
width = 3)),
orientation="h",name="logements sociaux") %>%
layout(yaxis=yform)
logville=logville[order(N)]
yform = list(categoryorder = "array",categoryarray = logville$LIBCOM)
#Création du graph
p2=plot_ly(data = logville,
x=~N,
y=~LIBCOM,
type="bar",
marker = list(color = 'rgb(229, 194, 216)',                                                                   line = list(color = 'rgb(8,48,107)',
width = 3)),
orientation="h",
name="Population") %>%
layout(yaxis=yform,
title="Top 10 des villes françaises en terme de logement sociaux")
p2
# subplot(p1,p2)
pop=densite[Ville %in% logville$LIBCOM,]
logville=logville[order(LIBCOM)]
pop=pop[order(Ville)]
perVille=data.table(per=logville$N/pop$Population,ville=pop$Ville)
perVille=perVille[order(per),]
yform = list(categoryorder = "array",categoryarray = perVille$ville)
plot_ly(x=perVille$per,
y=perVille$ville,
type="bar",
orientation="h",
marker = list(color = 'rgb(117, 158, 179 )',
line = list(color = 'rgb(8,48,107)',
width = 3)))%>%
layout(yaxis=yform,
title="Top 10 des villes françaises en fonction du rapport Nb_logement/Habitant")
region2=region[-14,]
region2=region2[order(LIBREG),]
qpal=colorQuantile("Oranges",
region2$V1,
n = 6)
adm = getData('GADM',
country='FRA',
level=1)
labels <- sprintf("<strong>%s</strong><br/>%g logements",
region2$LIBREG,
region2$V1) %>%
lapply(htmltools::HTML)
leaflet() %>%
addTiles() %>%
addPolygons(data=adm,
fillColor = ~qpal(region2$V1),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list("font-weight" = "normal",
padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
#Barre de sélection
inputPanel(selectInput("reg",
"R\u00e9gions",
choices = unique(ville$LIBREG),
selected = "Auvergne-Rh"
)
)
#Graph Nb logement / département
renderPlotly({
regSelect=ville[LIBREG %in% input$reg,]
resumeRegion=regSelect[,sum(N),by=LIBDEP]
plot_ly(x=resumeRegion$LIBDEP,
y=resumeRegion$V1,
type="bar",
name="logements sociaux",
marker = list(color = 'rgb(124, 180, 211)',
line = list(color = 'rgb(8,48,107)',
width = 3
)
),
) %>%
layout(yaxis=list(title="Nombre de logements sociaux")) %>%
add_trace(y=mean(resumeRegion$N),
mode="lines",
type="scatter",
name="moyenne r\u00e9gionale"
)
})
#Graph Top 10 ville
renderPlotly({
regSelect=ville[LIBREG %in% input$reg,]
logville=regSelect[,sum(N),by=LIBCOM]
logville=logville[order(V1,decreasing = FALSE),]
logville=tail(logville,10)
yform = list(categoryorder = "array",
categoryarray = logville$LIBCOM
)
plot_ly(x=logville$V1,
y=logville$LIBCOM,
type="bar",
orientation="h",
name="logements sociaux",
marker = list(color = 'rgb(128, 170, 174 )',
line = list(color = 'rgb(8,48,107)',
width = 3
)
)
) %>%
layout(yaxis=yform)
})
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
# Création du Donut
Donut_Char <- df_typeCons %>%
plot_ly(labels = ~Type_Construction, values = ~freq) %>%
add_pie(hole = 0.6) %>%
layout(title = "Répartition des types de constructions des logements sociaux\ndans les Pays de la Loire en 2016",  showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
Donut_Char
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
#Création du diagramme
plot_ly(x=table_NbPiece$NbPiece,y=table_NbPiece$freq,type="bar",name="logements sociaux", marker = list(color = 'rgb(147, 192, 148)',
line = list(color = 'rgb(8,48,107)',
width = 3))) %>%
layout(title = "Diagramme à barres représentant le nombre de\nlogements sociaux en fonction du nombre de pièce",
yaxis=list(title="Nombre de logements sociaux"))
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
# affichage carte
nantesLong <- -1.5533600
nantesLat <- 47.2172500
points2016 <- unique(data.frame(longitudes = dfNantes2016$longitude,
latitudes = dfNantes2016$latitude,
annee = '2016',
DPE = dfNantes2016$DPEENERGIE_red)
)
points2017 <- unique(data.frame(longitudes = dfNantes2017$longitude,
latitudes = dfNantes2017$latitude,
annee = '2017',
DPE = dfNantes2017$DPEENERGIE_red
)
)
points2018 <- unique(data.frame(longitudes = dfNantes2018$longitude,
latitudes = dfNantes2018$latitude,
annee = '2018',
DPE = dfNantes2018$DPEENERGIE
)
)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
colors <- c('rgb(239, 150, 207)', 'rgb(150, 211, 239)','rgb(150, 181, 239)' )
#Annee 2016
points2016$DPE[points2016$DPE == ''] <- NA
points2016$DPEGrad[points2016$DPE %in% c('A','B')] <- 'Bien isolé'
points2016$DPEGrad[points2016$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2016$DPEGrad[points2016$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2016 <- table(points2016$DPEGrad)
points2017$DPE[points2017$DPE == ''] <- NA
points2017$DPEGrad[points2017$DPE %in% c('A','B')] <- 'Bien isolé'
points2017$DPEGrad[points2017$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2017$DPEGrad[points2017$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2017 <- table(points2017$DPEGrad)
points2018$DPE[points2018$DPE == ''] <- NA
points2018$DPEGrad[points2018$DPE %in% c('A','B')] <- 'Bien isolé'
points2018$DPEGrad[points2018$DPE %in% c('C','D')] <- 'Moyennement isolé'
points2018$DPEGrad[points2018$DPE %in% c('E','F','G')] <- 'Mal isolé'
table_ener2018 <- table(points2018$DPEGrad)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
points <- rbind(points2016, points2017, points2018)
table_evo <- table(points$annee)
p <- plot_ly(y=table_evo,
x=names(table_evo),
type='bar',
marker = list(color = 'rgb(166, 182, 166)',                                                                   line = list(color = 'rgb(8,48,107)',                                                                        width = 3)))
p
evolution <- 100*(nrow(points2018)-nrow(points2016))/nrow(points2016)
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
m <- leaflet(points2017) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 12)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
m
p <- plot_ly() %>%
add_pie(points2016, labels = names(table_ener2016), values = table_ener2016, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0, 0.3), y = c(0, 1))) %>%
add_pie(points2017, labels = names(table_ener2017), values = table_ener2017, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0.35, 0.65), y = c(0, 1))) %>%
add_pie(points2018, labels = names(table_ener2018), values = table_ener2018, type = 'pie', marker = list(colors = colors, line = list(color = 'rgb(8,48,107)', width = 3)), domain = list(x = c(0.7, 1), y = c(0, 1)))%>%
layout(title = "Evolution de l'état du logement de 2016 à 2018", showlegend = T,
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
knitr::opts_chunk$set(echo = FALSE, message = FALSE,warning = FALSE)
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
m <- leaflet(hlmMalIso) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 14)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
m
View(hlmMalIso)
SQL_delete <- ("DELETE FROM SQL_delete WHERE longitudes IS NULL AND latitudes IS NULL")
hlmMalIso <- sqldf(SQL_delete)
SQL_delete <- ("DELETE FROM hlmMalIso WHERE longitudes IS NULL AND latitudes IS NULL")
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
hlmMalIso <- sqldf(SQL_delete)
View(hlmMalIso)
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
View(hlmMalIso)
SQL_delete <- ("DELETE FROM hlmMalIso WHERE longitudes IS NULL AND latitudes IS NULL AND annee = '2016' AND DPE = 'F' AND DPEGrad = 'Mal isolé'")
hlmMalIso <- sqldf(SQL_delete)
hlmMalIso %>% filter(!is.na(longitutes))
m <- leaflet(hlmMalIso) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 14)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
hlmMalIso %>% drop_na()
suppressPackageStartupMessages(suppressWarnings(library(tidyr)))
hlmMalIso %>% drop_na()
m <- leaflet(hlmMalIso) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 14)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
hlmMalIso <- points %>% filter(DPEGrad == 'Mal isolé')
hlmMalIso <- hlmMalIso %>% drop_na()
m <- leaflet(hlmMalIso) %>%
addTiles() %>%
setView(lng = nantesLong, lat = nantesLat, zoom = 14)  %>%
addMarkers(lng = ~longitudes, lat = ~latitudes)
m
View(hlmMalIso)
set("C:/Users/chauveau/Documents/Master MEDAS/Datavisualisation/Test_RMD/Test_rmd")
setwd("C:/Users/chauveau/Documents/Master MEDAS/Datavisualisation/Test_RMD/Test_rmd")
## Chargement de la table de données clean
load(file="./data/AllData.RData")
getwd()
